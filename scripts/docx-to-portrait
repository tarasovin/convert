#!/usr/bin/env gorun

package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	gooxml "github.com/unidoc/unidoc/document"
	wml "github.com/unidoc/unidoc/schema/soo/wml"
)

func docxProcessing(source, target string) {
	doc, err := gooxml.Open(source)
	if err != nil {
		log.Fatalf("Ошибка открытия документа: %s", err)
	}
	if doc.BodySection().X().PgSz == nil {
		doc.BodySection().X().PgSz = wml.NewCT_PageSz()
		if doc.BodySection().X().PgSz == nil {
			log.Fatalf("Не создан объект: %s", "doc.BodySection().X().PgSz")
		}
	}
	doc.BodySection().X().PgSz.OrientAttr = wml.ST_PageOrientationPortrait
	h := doc.BodySection().X().PgSz.HAttr
	w := doc.BodySection().X().PgSz.WAttr
	hn := doc.BodySection().X().PgSz.HAttr.ST_UnsignedDecimalNumber
	wn := doc.BodySection().X().PgSz.WAttr.ST_UnsignedDecimalNumber

	if *hn < *wn {
		doc.BodySection().X().PgSz.HAttr = w
		doc.BodySection().X().PgSz.WAttr = h
	}

	if err := doc.Validate(); err != nil {
		log.Fatalf("Ошибка валидации документа: %s", err)
	}

	doc.SaveToFile(target)
}
func main() {
	ext := ".docx"
	args := os.Args[1:]
	pattern := "*" + ext
	path := ""
	fmt.Println("docx-to-portrait", args)
	if len(args) > 0 {
		pattern = args[0]
	}
	if len(args) > 1 {
		path = args[1]
	}
	matches, err := filepath.Glob(filepath.Join(path, pattern))
	if err != nil {
		fmt.Println(err)
		return
	}
	for _, file := range matches {
		if filepath.Ext(file) == ext {
			fmt.Println("docx-to-portrait", file)
			docxProcessing(file, file)
		}
	}
	fmt.Println("docx-to-portrait", "done")
}
